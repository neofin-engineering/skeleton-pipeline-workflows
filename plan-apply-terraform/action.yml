# ðŸ“„ plan-apply-terraform.yml
# Action: Executa o ciclo completo de Terraform (init, validate, plan, apply)
# Objetivo: Aplicar a infraestrutura com base no plano gerado

name: Terraform Plan and Apply
description: "Executa o Terraform plan e apply com variÃ¡veis customizadas e autenticaÃ§Ã£o AWS."

inputs:
  PROJECT_NAME:
    description: "Nome do projeto para o TF_VAR"
    required: true
  S3_BUCKET_NAME:
    description: Nome do bucket S3 compartilhado
    required: true
  ENVIRONMENT:
    description: "Ambiente de execuÃ§Ã£o (dev, staging, prod)"
    required: true
  AWS_ACCESS_KEY_ID:
    description: Chave de acesso AWS
    required: true
  AWS_SECRET_ACCESS_KEY:
    description: Chave secreta AWS
    required: true
  GLOBAL_ENV_VARS_JSON:
    description: "JSON com variÃ¡veis globais"
    required: true
  ENVIRONMENTS_JSON:
    description: "JSON com dados dos ambientes"
    required: true
  terraform_path:
    description: Caminho para a raiz do Terraform (default ./terraform)
    required: false
    default: "terraform"

  # NOVOS INPUTS: Para SQS
  create_sqs_queue:
    description: "Define se uma NOVA fila SQS deve ser criada (true/false)."
    required: false
    default: "false"

  use_existing_sqs_trigger:
    description: "Define se uma fila SQS existente serÃ¡ usada como trigger para a Lambda."
    required: false
    default: "false"

  # MODIFICADO: Input agora Ã© o NOME da fila SQS existente, nÃ£o o ARN
  existing_sqs_queue_name:
    description: "O NOME da fila SQS existente a ser usada como trigger." # CORRIGIDO: de '=' para ':'
    required: false
    default: ""

runs:
  using: composite
  steps:
  # ðŸ§­  Auto formataÃ§ao dos arqivo Terraform
    - name: Auto format Terraform and commit changes
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      shell: bash
      run: |
        cd "${{ inputs.terraform_path }}"
        echo "ðŸ§¹ Corrigindo formataÃ§Ã£o com terraform fmt..."
        terraform fmt -recursive

        if [[ -n $(git status --porcelain) ]]; then
          echo "ðŸš¨ AlteraÃ§Ãµes de formataÃ§Ã£o detectadas. Realizando commit..."
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add .
          git commit -m "chore(terraform): auto fmt"
          git push
        else
          echo "âœ… Nenhuma alteraÃ§Ã£o de formataÃ§Ã£o detectada."
        fi

    # ðŸ§  Gera o plano de execuÃ§Ã£o
    - name: Terraform Plan
      shell: bash
      env:
        create_lambda_layer: "true"
        TF_VAR_project_name: ${{ inputs.PROJECT_NAME }}
        TF_VAR_s3_bucket_name: ${{ inputs.S3_BUCKET_NAME }}
        TF_VAR_global_env_vars: ${{ inputs.GLOBAL_ENV_VARS_JSON }}
        TF_VAR_environments: ${{ inputs.ENVIRONMENTS_JSON }}
        TF_VAR_create_sqs_queue: ${{ inputs.create_sqs_queue }}
        TF_VAR_use_existing_sqs_trigger: ${{ inputs.use_existing_sqs_trigger }}
        TF_VAR_existing_sqs_queue_name: ${{ inputs.existing_sqs_queue_name }}
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key_id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_access_key }}
      run: |
        cd "${{ inputs.terraform_path }}"
        echo "ðŸ“¦ Executando Terraform Plan..."
        terraform plan -input=false -var "environment=${{ inputs.ENVIRONMENT }}"

    # ðŸš€ Aplica o plano se auto_approve for true
    - name: Terraform Apply
      shell: bash
      env:
        TF_VAR_create_lambda_layer: "true"
        TF_VAR_project_name: ${{ inputs.PROJECT_NAME }}
        TF_VAR_s3_bucket_name: ${{ inputs.S3_BUCKET_NAME }}
        TF_VAR_global_env_vars: ${{ inputs.GLOBAL_ENV_VARS_JSON }}
        TF_VAR_environments: ${{ inputs.ENVIRONMENTS_JSON }}
        TF_VAR_create_sqs_queue: ${{ inputs.create_sqs_queue }}
        TF_VAR_use_existing_sqs_trigger: ${{ inputs.use_existing_sqs_trigger }}
        TF_VAR_existing_sqs_queue_name: ${{ inputs.existing_sqs_queue_name }}
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key_id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.AWS_SECRET_ACCESS_KEY }}
      run: |
        cd "${{ inputs.terraform_path }}"
        echo "ðŸš€ Executando Terraform Apply..."
        terraform apply -auto-approve -var "environment=${{ inputs.ENVIRONMENT }}"

# üìÑ generate-tvars.yml
# Action: Gera arquivo terraform.auto.tfvars.json com base em vari√°veis din√¢micas e segredos
# Objetivo: Gera arquivo terraform.auto.tfvars.json com base em vari√°veis din√¢micas e segredos
name: 'Generate tfvars'
description: 'Gera arquivo terraform.auto.tfvars.json com base em vari√°veis din√¢micas e segredos'

inputs:
  AWS_REGION:
    description: "Regi√£o AWS para o upload"
    required: true
  PROJECT_NAME:
    description: "Nome do projeto"
    required: true
  ENVIRONMENT:
    description: "Ambiente (ex: dev, staging, production)"
    required: true
  GLOBAL_ENV_VARS_JSON_MAIN:
    description: "JSON com vari√°veis de ambiente globais para a branch main"
    required: false
  GLOBAL_ENV_VARS_JSON_SANDBOX:
    description: "JSON com vari√°veis de ambiente globais para a branch sandbox"
    required: false
  GLOBAL_ENV_VARS_JSON_DEV:
    description: "JSON com vari√°veis de ambiente globais para a branch dev"
    required: false
  ENVIRONMENTS:
    description: "Lista de ambientes"
    required: true
  aws_access_key_id:
    description: "AWS Access Key ID"
    required: true
  aws_secret_access_key:
    description: "AWS Secret Access Key"
    required: true
  s3_bucket_name:
    description: "Nome do bucket S3"
    required: true
  create_sqs_queue:
    description: "Define se a fila SQS deve ser criada (true/false)."
    required: true
    default: "true"
  use_existing_sqs_trigger:
    description: "Define se uma fila SQS existente ser√° usada como trigger para a Lambda."
    required: true
    default: "false"
  existing_sqs_queue_name:
    description: "O NOME da fila SQS existente a ser usada como trigger (requer use_existing_sqs_trigger=true)."
    required: false
    default: ""
  lambda_vpc_id:
    description: "ID da VPC para a fun√ß√£o Lambda. Opcional."
    required: false
    default: ""
  lambda_subnet_ids:
    description: "Lista de IDs das subnets para a fun√ß√£o Lambda (separados por v√≠rgula). Opcional."
    required: false
    default: ""
  lambda_security_group_ids:
    description: "Lista de IDs dos Security Groups para a fun√ß√£o Lambda (separados por v√≠rgula). Opcional."
    required: false
    default: ""
  lambda_timeout:
    description: "Tempo limite de execu√ß√£o da Lambda em segundos. Opcional."
    required: false
    default: "30"
  lambda_memory:
    description: "Mem√≥ria da Lambda em MB. Opcional."
    required: false
    default: "128"

runs:
  using: "composite"
  steps:
    # üïµÔ∏è SELECIONA O JSON COM BASE NA BRANCH
    # ----------------------------------------
    - name: Selecionar JSON de vari√°veis de ambiente
      id: set-env-json
      shell: bash
      run: |
        BRANCH_NAME="${{ github.ref_name }}"
        case "$BRANCH_NAME" in
          "main")
            if [ -z "${{ inputs.GLOBAL_ENV_VARS_JSON_MAIN }}" ]; then
              echo "::error::GLOBAL_ENV_VARS_JSON_MAIN is required for the main branch" && exit 1
            fi
            echo "::set-output name=env_json::${{ inputs.GLOBAL_ENV_VARS_JSON_MAIN }}"
            ;;
          "dev")
            if [ -z "${{ inputs.GLOBAL_ENV_VARS_JSON_DEV }}" ]; then
              echo "::error::GLOBAL_ENV_VARS_JSON_DEV is required for the dev branch" && exit 1
            fi
            echo "::set-output name=env_json::${{ inputs.GLOBAL_ENV_VARS_JSON_DEV }}"
            ;;
          "sandbox")
            if [ -z "${{ inputs.GLOBAL_ENV_VARS_JSON_SANDBOX }}" ]; then
              echo "::error::GLOBAL_ENV_VARS_JSON_SANDBOX is required for the sandbox branch" && exit 1
            fi
            echo "::set-output name=env_json::${{ inputs.GLOBAL_ENV_VARS_JSON_SANDBOX }}"
            ;;
          *)
            echo "::error::Branch '$BRANCH_NAME' is not supported." && exit 1
            ;;
        esac

    # üìä Verificar o sucesso no recebimento das vari√°veis 
    - name: Debug vari√°veis de entrada na Generate tfvars
      shell: bash
      run: |
        echo "project_name=${{ inputs.PROJECT_NAME }}"
        echo "environment=${{ inputs.ENVIRONMENT }}"
        echo "s3_bucket_name=${{ inputs.s3_bucket_name }}"
        echo "aws_region=${{ inputs.AWS_REGION }}"
        echo "create_sqs_queue=${{ inputs.create_sqs_queue }}" 
        echo "use_existing_sqs_trigger=${{ inputs.use_existing_sqs_trigger }}"
        echo "existing_sqs_queue_name=${{ inputs.existing_sqs_queue_name }}"
        echo "lambda_vpc_id=${{ inputs.lambda_vpc_id }}"
        echo "lambda_subnet_ids=${{ inputs.lambda_subnet_ids }}"
        echo "lambda_security_group_ids=${{ inputs.lambda_security_group_ids }}"
        echo "lambda_timeout=${{ inputs.lambda_timeout }}"
        echo "lambda_memory=${{ inputs.lambda_memory }}"
        echo "---"

    # üßæ Chama o script Bash externo para gerar o arquivo terraform.auto.tfvars.json
    - name: Gerar arquivo terraform.auto.tfvars.json
      shell: bash
      run: |
        # Verifica se o script existe
        if [ ! -f "${{ github.action_path }}/scripts/generate_tfvars.sh" ]; then
          echo "‚ùå Script generate_tfvars.sh n√£o encontrado em ${{ github.action_path }}/scripts/"
          exit 1
        fi
        # Executa o script passando todos os inputs como vari√°veis de ambiente
        # O script usar√° estas vari√°veis para construir o JSON.
        bash "${{ github.action_path }}/scripts/generate_tfvars.sh"
      env: # Passa todos os inputs da Action como vari√°veis de ambiente para o script Bash
        AWS_REGION: ${{ inputs.AWS_REGION }}
        PROJECT_NAME: ${{ inputs.PROJECT_NAME }}
        ENVIRONMENT: ${{ inputs.ENVIRONMENT }}
        GLOBAL_ENV_VARS_JSON: ${{ steps.set-env-json.outputs.env_json }} # <--- AQUI EST√Å A MUDAN√áA
        ENVIRONMENTS: ${{ inputs.ENVIRONMENTS }}
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key_id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_access_key }}
        S3_BUCKET_NAME: ${{ inputs.s3_bucket_name }}
        CREATE_SQS_QUEUE: ${{ inputs.create_sqs_queue }}
        USE_EXISTING_SQS_TRIGGER: ${{ inputs.use_existing_sqs_trigger }}
        EXISTING_SQS_QUEUE_NAME: ${{ inputs.existing_sqs_queue_name }}
        # --- NOVAS VARI√ÅVEIS DE AMBIENTE PARA O SCRIPT BASH ---
        LAMBDA_VPC_ID: ${{ inputs.lambda_vpc_id }}
        LAMBDA_SUBNET_IDS: ${{ inputs.lambda_subnet_ids }}
        LAMBDA_SECURITY_GROUP_IDS: ${{ inputs.lambda_security_group_ids }}
        LAMBDA_TIMEOUT: ${{ inputs.lambda_timeout }}
        LAMBDA_MEMORY: ${{ inputs.lambda_memory }}

    # üïµÔ∏è‚Äç‚ôÄÔ∏è Debug do arquivo gerado
    - name: Debug - Conte√∫do de terraform.auto.tfvars.json (AP√ìS GERA√á√ÉO)
      shell: bash
      run: |
        echo "üìÑ Conte√∫do final de terraform/terraform.auto.tfvars.json:"
        cat terraform/terraform.auto.tfvars.json || echo "‚ùå terraform.auto.tfvars.json n√£o encontrado."
        echo "---"

    # üóÇÔ∏è Validando acesso ao reposit√≥rio na AWS
    - name: Verificar acesso ao bucket S3
      shell: bash
      run: aws s3 ls s3://${{ inputs.s3_bucket_name }}
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key_id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_access_key }}
        AWS_REGION: ${{ inputs.AWS_REGION }}

    # üõ°Ô∏è Validando credenciais de acesso a AWS
    - name: Validar credenciais AWS (STS)
      shell: bash
      run: aws sts get-caller-identity
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key_id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_access_key }}
        AWS_REGION: ${{ inputs.AWS_REGION }}
